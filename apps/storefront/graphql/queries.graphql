#import "./fragments.graphql"

fragment ImageFragment on Image {
  url
  alt
}

fragment ProductMediaFragment on ProductMedia {
  url
  alt
  type
}

fragment AddressDetailsFragment on Address {
  phone
  firstName
  lastName
  streetAddress1
  city
  postalCode
  country {
    code
    country
  }
}

fragment DeliveryMethodFragment on ShippingMethod {
  id
  name
  price {
    ...PriceFragment
  }
  minimumDeliveryDays
  maximumDeliveryDays
}

fragment CheckoutLineDetailsFragment on CheckoutLine {
  id
  totalPrice {
    gross {
      ...PriceFragment
    }
  }
  variant {
    id
    product {
      id
      name
      slug
      thumbnail {
        ...ImageFragment
      }
    }
    pricing {
      price {
        gross {
          ...PriceFragment
        }
      }
    }
    name
  }
}

fragment CheckoutDetailsFragment on Checkout {
  id
  token
  email
  billingAddress {
    ...AddressDetailsFragment
  }
  shippingAddress {
    ...AddressDetailsFragment
  }
  shippingMethod {
    ...DeliveryMethodFragment
  }
  isShippingRequired
  availableShippingMethods {
    ...DeliveryMethodFragment
  }
  availablePaymentGateways {
    id
    name
    config {
      field
      value
    }
  }
  lines {
    ...CheckoutLineDetailsFragment
  }
  discount {
    ...PriceFragment
  }
  discountName
  subtotalPrice {
    net {
      ...PriceFragment
    }
    tax {
      ...PriceFragment
    }
  }
  shippingPrice {
    gross {
      ...PriceFragment
    }
  }
  totalPrice {
    gross {
      ...PriceFragment
    }
  }
}

mutation checkoutPaymentCreate(
  $checkoutToken: UUID!
  $paymentInput: PaymentInput!
) {
  checkoutPaymentCreate(token: $checkoutToken, input: $paymentInput) {
    payment {
      id
      total {
        ...PriceFragment
      }
    }
    errors {
      field
      message
    }
  }
}

mutation checkoutComplete($checkoutToken: UUID!, $paymentData: JSONString) {
  checkoutComplete(token: $checkoutToken, paymentData: $paymentData) {
    order {
      id
      status
      token
      billingAddress {
        id
        ...AddressDetailsFragment
      }
      shippingAddress {
        id
        ...AddressDetailsFragment
      }
    }
    confirmationNeeded
    confirmationData
    errors {
      field
      message
      variants
      addressType
    }
  }
}

mutation RemoveProductFromCheckout($checkoutToken: UUID!, $lineId: ID!) {
  checkoutLineDelete(token: $checkoutToken, lineId: $lineId) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}

mutation CreateCheckout($email: String!, $lines: [CheckoutLineInput!]!) {
  checkoutCreate(
    input: { channel: "default-channel", email: $email, lines: $lines }
  ) {
    checkout {
      id
      token
    }
    errors {
      field
      message
      code
    }
  }
}

mutation AddProductToCheckout($checkoutToken: UUID!, $variantId: ID!) {
  checkoutLinesAdd(
    token: $checkoutToken
    lines: [{ quantity: 1, variantId: $variantId }]
  ) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      code
    }
  }
}

query CheckoutByToken($checkoutToken: UUID!) {
  checkout(token: $checkoutToken) {
    ...CheckoutDetailsFragment
  }
}

fragment ProductDetailsFragment on Product {
  id
  name
  slug
  description
  seoDescription
  seoTitle
  isAvailableForPurchase
  category {
    ...CategoryBasicFragment
  }
  variants {
    id
    name
    quantityAvailable
  }
  pricing {
    priceRange {
      start {
        gross {
          ...PriceFragment
        }
      }
    }
  }
  media {
    ...ProductMediaFragment
  }
  thumbnail {
    ...ImageFragment
  }
  category {
    name
  }
}

query ProductBySlug($slug: String!) {
  product(slug: $slug, channel: "default-channel") {
    ...ProductDetailsFragment
  }
}

query ProductPaths($after: String) {
  products(first: 50, channel: "default-channel", after: $after) {
    edges {
      cursor
      node {
        id
        slug
      }
    }
  }
}

fragment ProductCardFragment on Product {
  id
  slug
  name
  thumbnail {
    ...ImageFragment
  }
  category {
    name
  }
  pricing {
    onSale
    priceRange {
      start {
        gross {
          ...PriceFragment
        }
      }
      stop {
        gross {
          ...PriceFragment
        }
      }
    }
  }
}

query ProductCollection(
  $before: String
  $after: String
  $filter: ProductFilterInput
) {
  products(
    first: 4
    channel: "default-channel"
    after: $after
    before: $before
    filter: $filter
  ) {
    totalCount
    edges {
      cursor
      node {
        ...ProductCardFragment
      }
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}

fragment CategoryBasicFragment on Category {
  id
  name
  slug
}

fragment CategoryDetailsFragment on Category {
  id
  ...CategoryBasicFragment
  seoTitle
  seoDescription
  description
  backgroundImage {
    ...ImageFragment
  }
  ancestors(first: 5) {
    edges {
      node {
        ...CategoryBasicFragment
      }
    }
  }
}

query CategoryBySlug($slug: String!) {
  category(slug: $slug) {
    ...CategoryDetailsFragment
  }
}

query CategoryPaths {
  categories(first: 20) {
    edges {
      cursor
      node {
        id
        slug
      }
    }
  }
}

mutation CheckoutAddPromoCode($token: UUID!, $promoCode: String!) {
  checkoutAddPromoCode(token: $token, promoCode: $promoCode) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      field
    }
  }
}

mutation CheckoutEmailUpdate($token: UUID!, $email: String!) {
  checkoutEmailUpdate(email: $email, token: $token) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}

mutation CheckoutBillingAddressUpdate($token: UUID!, $address: AddressInput!) {
  checkoutBillingAddressUpdate(billingAddress: $address, token: $token) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
      code
    }
  }
}

mutation CheckoutShippingAddressUpdate($token: UUID!, $address: AddressInput!) {
  checkoutShippingAddressUpdate(shippingAddress: $address, token: $token) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
      code
    }
  }
}

query AvailableShippingMethods {
  shop {
    availableShippingMethods(channel: "default-channel") {
      id
      name
      price {
        ...PriceFragment
      }
    }
  }
}

mutation CheckoutShippingMethodUpdate($token: UUID!, $shippingMethodId: ID!) {
  checkoutShippingMethodUpdate(
    shippingMethodId: $shippingMethodId
    token: $token
  ) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
      code
    }
  }
}
query OrderDetailsQuery($token: UUID!) {
  orderByToken(token: $token) {
    id
    number
    shippingPrice {
      gross {
        ...PriceFragment
      }
    }
    created
    lines {
      id
      thumbnail {
        ...ImageFragment
      }
      totalPrice {
        gross {
          ...PriceFragment
        }
      }
      productName
      variantName
      quantity
    }
    total {
      gross {
        ...PriceFragment
      }
    }
    statusDisplay
  }
}

mutation addressSetDefaultMutation(
  $addressID: ID!
  $userID: ID!
  $addressType: AddressTypeEnum!
) {
  addressSetDefault(
    addressId: $addressID
    type: $addressType
    userId: $userID
  ) {
    errors {
      field
      message
      code
    }
  }
}

query meDetailsQuery {
  me {
    id
    lastLogin
    dateJoined
    email
    firstName
    lastName
    avatar {
      ...ImageFragment
    }
    orders {
      totalCount
    }
  }
}

fragment MenuItemFragment on MenuItem {
  id
  name
  category {
    id
    slug
  }
  collection {
    id
    slug
  }
  page {
    id
    slug
    content
  }
}

query MenuQuery($slug: String!) {
  menu(channel: "default-channel", slug: $slug) {
    id
    name
    slug
    items {
      ...MenuItemFragment
    }
  }
}

query PageQuery($slug: String!) {
  page(slug: $slug) {
    id
    title
    seoTitle
    seoDescription
    slug
    created
    content
  }
}

mutation RequestEmailChange(
  $newEmail: String!
  $password: String!
  $redirectUrl: String!
) {
  requestEmailChange(
    channel: "default-channel"
    newEmail: $newEmail
    password: $password
    redirectUrl: $redirectUrl
  ) {
    user {
      email
    }
    errors {
      field
      message
      code
    }
  }
}

mutation PasswordChange($newPassword: String!, $oldPassword: String!) {
  passwordChange(newPassword: $newPassword, oldPassword: $oldPassword) {
    user {
      email
    }
    errors {
      field
      message
      code
    }
  }
}

fragment CollectionBasicFragment on Collection {
  id
  name
  slug
}

fragment CollectionDetailsFragment on Collection {
  id
  ...CollectionBasicFragment
  seoTitle
  seoDescription
  description
  backgroundImage {
    ...ImageFragment
  }
}

query CollectionBySlug($slug: String!) {
  collection(slug: $slug, channel: "default-channel") {
    id
    ...CollectionDetailsFragment
    seoTitle
    seoDescription
    description
    backgroundImage {
      ...ImageFragment
    }
  }
}

query CollectionPaths {
  collections(channel: "default-channel", first: 20) {
    edges {
      node {
        slug
      }
    }
  }
}

fragment OrderDetailsFragment on Order {
  id
  token
  created
  number
  status
  total {
    currency
    gross {
      ...PriceFragment
    }
    net {
      ...PriceFragment
    }
  }
}

query Orders($before: String, $after: String) {
  me {
    orders(first: 10, before: $before, after: $after) {
      edges {
        cursor
        node {
          ...OrderDetailsFragment
        }
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
      totalCount
    }
  }
}

query OrderDetailsByToken($token: UUID!) {
  orderByToken(token: $token) {
    id
    status
    number
    shippingAddress {
      ...AddressDetailsFragment
    }
    billingAddress {
      ...AddressDetailsFragment
    }
    subtotal {
      net {
        ...PriceFragment
      }
      tax {
        ...PriceFragment
      }
    }
    total {
      gross {
        ...PriceFragment
      }
    }
    lines {
      id
      productName
      variantName
      quantity
      thumbnail {
        url
        alt
      }
      unitPrice {
        gross {
          ...PriceFragment
        }
      }
      totalPrice {
        gross {
          ...PriceFragment
        }
      }
    }
    shippingPrice {
      gross {
        ...PriceFragment
      }
    }
  }
}
